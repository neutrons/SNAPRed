[project]
name = "SNAPRed"
description = "A desktop application for Lifecycle Managment of data collected from the SNAP instrument."
dynamic = ["version"]
requires-python = ">=3.10"
dependencies = [
    "mantidworkbench >= 6.10.20240705",
    "pyoncat ~= 1.6"
]
readme = "README.md"
license = { text = "GPL3.0" }


[project.urls]
homepage = "https://github.com/neutrons/SNAPRed"  # if no homepage, use repo url
repository = "https://github.com/neutrons/SNAPRed"
# documentation = add_url_to_readthedoc_here
issues = "https://github.com/neutrons/SNAPRed/issues"

[project.scripts]
snapred = "snapred.__main__:main"

[build-system]
requires = ["setuptools", "toml", "versioningit"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.ui", "*.txt","*.yml","*.yaml","*.qss"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.versioningit.next-version]
method = "minor"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}"
dirty = "{version}+d{build_date:%Y%m%d}"
distance-dirty = "{next_version}.dev{distance}+d{build_date:%Y%m%d%H%M}"

[tool.versioningit.write]
file = "src/snapred/_version.py"


[tool.pytest.ini_options]
pythonpath = [
  "src"
]
markers = [
  "integration: mark a test as an integration test",
  "mount_snap: mark a test as using /SNS/SNAP/ data mount",
  "golden_data(*, path=None, short_name=None, date=None): mark golden data to use with a test"
]
addopts = "-m 'not integration'"


[tool.ruff]
line-length = 120
# https://beta.ruff.rs/docs/rules/
select = ["A", "ARG", "BLE", "E", "F", "I", "PT"]
ignore = ["F403", "F405", # wild imports and  unknown names
]
extend-exclude = ["conftest.py"]

[[tool.mypy.overrides]]
module = [
    "yaml",
]
ignore_missing_imports = true # gets around mantid imports
exclude = [
"tests/",
"src/snapred/backend/",
"src/snapred/meta/",
"src/snapred/ui/"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.coverage.run]
source = ["src/snapred"]
omit = [
        "*/tests/*",
        "conda.recipe/*",
        "docs/*",
        "src/snapred/__init__.py",
        "src/snapred/ui/*",
        "src/snapred/backend/dao/*",
        "src/snapred/_version.py",
  ]

[tool.coverage.report]
fail_under = 1
exclude_lines = [
  'if __name__ == "__main__":'
]
