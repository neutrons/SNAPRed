# environment: dev

IPTS:
  default: /SNS
  root: /SNS

orchestration:
  path:
    delimiter: /

facility:
  name: SNS

instrument:
  name: SNAP
  home: ${IPTS.root}/SNAP
  calibration:
    home: ${instrument.home}/shared/Calibration
    sample:
      home: ${instrument.calibration.home}/CalibrantSamples
      extensions:
        - json
    powder:
      home: ${instrument.calibration.home}/Powder
      grouping:
        home: ${instrument.calibration.powder.home}/PixelGroupingDefinitions
        extensions:
          - hdf
          - xml
          - nxs
  reduction:
    # Here "{IPTS}" will be substituted with the IPTS-directory name for a specified <runNumber>
    home: ${instrument.home}/{IPTS}/shared/SNAPRed

  # Swap the commented out fields when using ultralite data
  config: ${instrument.calibration.home}/SNAPInstPrm.json
  parameters:
    home: ${instrument.calibration.home}/SNAPInstPrm
  native:
    pixelResolution: 1179648
    # pixelResolution: 72
    definition:
      file: ${module.root}/resources/SNAP_Definition.xml
      # file: ${module.root}/resources/ultralite/CRACKLE_Definition.xml
  lite:
    pixelResolution: 18432
    # pixelResolution: 18
    definition:
      file: ${module.root}/resources/SNAPLite_Definition.xml
      # file: ${module.root}/resources/ultralite/CRACKLELite_Definition.xml
    map:
      file: ${instrument.calibration.home}/Powder/LiteGroupMap.hdf
      # file: ${module.root}/resources/ultralite/CRACKLELiteDataMap.xml

  PVLogs:
    # Swap these when running with ultralite data
    rootGroup: "entry/DASlogs"
    # rootGroup: "mantid_workspace_1/logs"

    # PV-log keys relating to instrument settings:
    #   - for alternative log keys, the preferred value is the first,
    #     and that key is also what will be used in SNAPRed.
    instrumentKeys:
    -
      - "BL3:Chop:Skf1:WavelengthUserReq"
      - "BL3:Chop:Gbl:WavelengthReq"
      - "BL3:Det:TH:BL:Lambda"
    - "det_arc1"
    - "det_arc2"
    - "BL3:Det:TH:BL:Frequency"
    -
      - "BL3:Mot:OpticsPos:Pos"
      - "optics"
    - "det_lin1"
    - "det_lin2"

  startingRunNumber: 10000
  minimumRunNumber: 46342
  maxNumberOfRuns: 10

liveData:
  enabled: false
  # Override 'liveData.facility' and 'liveData.instrument'
  #   in order to use the mock listener for testing
  #   without overriding the real instrument.
  facility:
    name: ${facility.name}
    # name: TEST_LIVE
  instrument:
    name: ${instrument.name}
    # name: ADARA_FileReader

  # The ONLY supported mode right now is 'REPLACE':
  #   any other mode requires stay-resident `LoadLiveData` treatment.
  accumulationMethod: Replace

  testInput:
    inputFilename: SNAP_46680.nxs.h5
    # WARNING: "chunks" seems a bit glitchy:
    #   event workspaces are not loaded uniformly with respect to
    #   event _pixel_ assignment.
    # For thorough testing "1" might actually be the best value!
    chunks: 1 # 50

  # Update-interval slider limits and position in seconds.
  updateIntervalMinimum: 60
  updateIntervalDefault: 120
  updateIntervalMaximum: 900

nexus:
  lite:
    prefix: shared/lite/SNAP_
    extension: .lite.nxs.h5
  native:
    prefix: nexus/SNAP_
    extension: .nxs.h5
  file:
    extension: .nxs.h5
    prefix: SNAP_

grouping:
  workspacename:
    lite: SNAPLite_grouping_
    native: SNAP_grouping_

calibration:
  file:
    extension: .json
    prefix: SNAPcalibLog
  normalization:
    output:
      ws:
        extension: .nxs
  diffraction:
    output:
      extension: .nxs.h5
    diagnostic:
      extension: .nxs.h5
    maximumIterations: 5
    convergenceThreshold: 0.5
    nBinsAcrossPeakWidth: 10
    maximumOffset: 10
    maxDSpaceShiftFactor: 2.5
    peakFunction: GAUSSIAN
    minimumPeaksPerGroup: 2
    preferredPeaksPerGroup: 4
    smoothingParameter: 0.0001
  parameters:
    default:
      # degrees
      groupSliceValue: 5
      alpha: 0.1
      beta:
        - 0.02
        - 0.05
      FWHMMultiplier: {left: 1.5, right: 1.5}
      peakTailCoefficient: 2.0
      smoothing: 0.000001
  fitting:
    minSignal2Noise: 0.0

reduction:
  output:
    extension: .nxs
    # convert the instrument for the output workspaces into the reduced form
    useEffectiveInstrument: false

mantid:
  workspace:
    # WARNING: 'normalizeByBeamMonitor' and 'liveData.enabled' should not be set at the same time.
    #   This type of normalization is not yet implemented for live-data mode.  Live-data mode will not function correctly!
    normalizeByBeamMonitor: false
    normMonitorID: 0
    nameTemplate:
      delimiter: "_"
      template:
        run: "{unit},{group},{lite},{auxiliary},{runNumber}"
        liteDataMap: "lite_grouping_map"

        # TODO: modify `WorkspaceNameGenerator.__init__` so that '${instrument.name}' can be used here:
        grouping: "SNAP{lite},grouping,{group},{runNumber}"

        diffCal:
          input: "{unit},{runNumber},raw"
          table: "diffract_consts,{runNumber},{version}"
          output: "{unit},{group},{runNumber},{version}"
          diagnostic: "diagnostic,{group},{runNumber},{version}"
          mask: "diffract_consts,mask,{runNumber},{version}"
          metric: "calib_metrics,{metricName},{runNumber},{version}"
          timedMetric: "calib_metrics,{metricName},{runNumber},{timestamp}"
        monitor: "monitor,{runNumber}"
        normCal:
          rawVanadium: "{unit},{group},{masked},{runNumber},raw_van_corr,{version}"
          focusedRawVanadium: "{unit},{group},{runNumber},raw_van_corr,{version}"
          smoothedFocusedRawVanadium: "{unit},{group},{runNumber},fitted_van_corr,{version}"
          artificialNormalizationPreview: "artificial_norm,{unit},{group},{runNumber},{type}"
          residual: "{unit},{runNumber},residual"
        reduction:
          output: "reduced,{unit},{group},{runNumber},{timestamp}"
          outputGroup: "reduced,{runNumber},{timestamp}"
          pixelMask: "pixelmask,{runNumber},{timestamp}"
          # the user pixel mask name token is case sensitive
          userPixelMask: "MaskWorkspace,{numberTag}"
      formatter:
        version:
          # Zero fill to 4 digits.  Allow excess length.
          workspace: "v{version:04d}"
          path: "v_{version:04d}"
        timestamp:
          # Substitute timestamp-in-milliseconds if the keyword is present (e.g. "ts{timestamp}"),
          #   otherwise use `datetime.strftime` format-string syntax.
          workspace: "%Y-%m-%dT%H%M%S%z"
          path: "%Y-%m-%dT%H%M%S%z"
          path_regx: "([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2})([0-9]{2})([0-9]{2})"
        numberTag:
          # No zero fill.  Will not be output if == 1.  Allow excess length.
          workspace: "{number}"
          path: "{number}"
        runNumber:
          # Zero fill to 6 digits.  Allow excess length.
          workspace: "{runNumber:>06}"
          path: "{runNumber:>06}"
        stateId:
          # Only use the first 8 characters from the SHA.
          workspace: "{stateId:8.8}"
          path: "{stateId}"
      units:
        dSpacing: DSP
        timeOfFlight: TOF
        momentumTransfer: QSP
        wavelength: LAM
        diagnostic: diagnostic
      groups:
        unfocussed: Unfoc
        all: All
        column: Column
        bank: Bank

localdataservice:
  config:
    verifypaths: true

logging:
  # log levels are NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL
  mantid:
    # IMPORTANT: "root" level determines override for message-pane level:
    #    do not set to *debug* for live-data usage!
    root:
      level: "WARNING"
    stream:
      level: "WARNING"
      format: 'MANTID %(levelname)-8s - %(asctime)s - %(message)s'
    file:
      level: "INFO"
      format: ${logging.SNAP.stream.format}
      output: "mantidlog.txt"
  SNAP:
    stream:
      level: "INFO"
      format: '%(asctime)s - %(levelname)-8s - %(name)s - %(message)s'

samples:
  home: ${instrument.calibration.sample.home}

version:
  friendlyName:
    error: "uninitialized"  # alphanumeric
    default: 0 # alphanumeric
  start: 0   # MUST be nonnegative integer

cis_mode:
  enabled: false
  preserveDiagnosticWorkspaces: false
  reloadConfigButton: false

constants:
  millisecondsPerSecond: 1000
  PeakIntensityFractionThreshold: 0.05
  m2cm: 10000.0 # conversion factor for m^2 to cm^2
  maskedPixelThreshold: 0.15

  ArtificialNormalization:
    peakWindowClippingSize: 10
  CalibrationReduction:
    tofMin: 2000
    tofMax: 14500
    rebinParams: [2000, -0.001, 14500]
  CropFactors:
    lowWavelengthCrop: 0.05
    lowdSpacingCrop: 0.1
    highdSpacingCrop: 0.15
  CrystallographicInfo:
    crystalDMin: 0.4
    crystalDMax: 100.0
  DetectorPeakPredictor:
    fwhm: 1.17741002252 # used to convert gaussian to fwhm (2 * log_e(2))
  LiteDataCreationAlgo:
    toggleCompressionTolerance: false  # false = no tolerance compression, true = tolerance compression
    # tolerance: -0.004                 # tolerance override for calculated compression
  GroupDiffractionCalibration:
    MaxChiSq: 10000
  RawVanadiumCorrection:
    numberOfSlices: 10
    numberOfAnnuli: 10
  ResampleX:
    NumberBins: 1500

docs:
  user:
    path: /SNS/SNAP/shared/Malcolm/SNAPUserDocs/_build/html/index.html

metadata:
  tagPrefix: SNAPRed_

ui:
  default:
    reduction:
      smoothing: 5
    workflow:
      completionMessage: "‧₊‧₊The workflow has been completed successfully!‧₊‧₊"

system:
  max_hdf5_descriptors: 5
