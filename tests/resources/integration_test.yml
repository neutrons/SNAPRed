# environment: integration_test
# At present:
#   * this "integration_test.yml" overrides "IPTS.root", and "constants.maskedPixelThreshold";
#   * "module.root" will still be defined as in "test.yml".

IPTS:
  # Eventually, for SNAPRed's test framework:
  #   this should be a shared location on "analysis.sns.gov".
  # For the moment, each developer needs to set this individually to their local path.
  root: ${module.root}/data/snapred-data/SNS

instrument:
  native:
    name: crackle
    pixelResolution: 72
    definition:
      file: ${module.root}/resources/ultralite/CRACKLE_Definition.xml
  lite:
    name: pop
    pixelResolution: 18
    definition:
      file: ${module.root}/resources/ultralite/CRACKLELite_Definition.xml
    map:
      file: ${module.root}/resources/ultralite/CRACKLELiteDataMap.xml

  PVLogs:
    # Swap these when running with ultralite data
    # rootGroup: "/entry/DASlogs"
    rootGroup: "/mantid_workspace_1/logs"

    # PV-log keys relating to instrument settings:
    instrumentPVKeys:
    - "BL3:Chop:Gbl:WavelengthReq"
    - "BL3:Chop:Skf1:WavelengthUserReq"
    - "det_arc1"
    - "det_arc2"
    - "BL3:Det:TH:BL:Frequency"
    - "BL3:Mot:OpticsPos:Pos"
    - "det_lin1"
    - "det_lin2"

calibration:
  parameters:
    default:
      alpha: 0.1
      # alpha: 1.1
      beta:
        - 0.02
        - 0.05
      # beta:
      #   - 1
      #   - 2
  fitting:
    # minSignal2Noise: 0.0
    minSignal2Noise: 10

mantid:
  workspace:
    nameTemplate:
      delimiter: "_"
      template:
        run: "{unit},{group},{lite},{auxiliary},{runNumber}"
        diffCal:
          input: "{unit},{runNumber},raw"
          table: "diffract_consts,{runNumber},{version}"
          output: "{unit},{group},{runNumber},{version}"
          diagnostic: "diagnostic,{group},{runNumber},{version}"
          mask: "diffract_consts,mask,{runNumber},{version}"
          metric: "calib_metrics,{metricName},{runNumber},{version}"
          timedMetric: "calib_metrics,{metricName},{runNumber},{timestamp}"
        normCal:
          rawVanadium: "{unit},{group},{masked},{runNumber},raw_van_corr,{version}"
          focusedRawVanadium: "{unit},{group},{runNumber},raw_van_corr,{version}"
          smoothedFocusedRawVanadium: "{unit},{group},{runNumber},fitted_van_corr,{version}"

constants:
  # For tests with '46680' this seems to be necessary.
  maskedPixelThreshold: 1.0

  DetectorPeakPredictor:
    fwhm: 1.17741002252 # used to convert gaussian to fwhm (2 * log_e(2))
  CropFactors:
    lowWavelengthCrop: 0.05
    lowdSpacingCrop: 0.1
    highdSpacingCrop: 0.15
  RawVanadiumCorrection:
    numberOfSlices: 1
    numberOfAnnuli: 1

application:
  workflows_data:
    timing:
      # Enable the `ProgressRecorder`.
      # IMPORTANT: by default this must remain disabled for tests!
      #   Otherwise the `ProgressRecorder` will still load and unload persistent data.
      enabled: true

      home: ${user.application.data.home}/workflows_data/timing

      # save new timing data at application exit
      persistent_data: true

      max_files: 5
      max_measurements: 50

      # spline order for time estimates
      spline_order: 3

      # update estimates if off by 20%
      update_threshold: 0.2
      # update only when sufficient data points are available
      update_minimum_count: 5

      # logging of execution-time information:
      logging:
        # in order to enable logging:
        #   the first part of the fully-qualified name of the progress-recording step must be in this list:
        qualname_roots:
          - "ReductionService"
          - "CalibrationService"
          - "NormalizationService"

        loglevel: 20 # logging.INFO
        log_update_interval: 0 # in seconds, 0 => explicit logging only
        indent: "  " # string to be used for indenting sub-levels
