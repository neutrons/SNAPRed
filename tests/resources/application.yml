environment: test

IPTS:
  default: /SNS
  root: /SNS

orchestration:
  path:
    delimiter: /

instrument:
  name: SNAP
  # "instrument.home" is overridden in "test.yml":
  home: ${IPTS.root}/SNAP
  calibration:
    # "instrument.calibration.home" is overridden in "test.yml":
    home: ${instrument.home}/shared/Calibration
    sample:
      # "instrument.calibration.sample.home" is overridden in "test.yml":
      home: ${instrument.calibration.home}/CalibrantSample
      extensions:
        - json

    powder:
      home: ${instrument.calibration.home}/Powder
      grouping:
        home: ${instrument.calibration.powder.home}/PixelGroupingDefinitions
        extensions:
          - xml
          - nxs
          - hdf
  reduction:
    # Here "{IPTS}" will be substituted with the IPTS-directory name for a specified <runNumber>
    home: ${instrument.home}/{IPTS}/shared/SNAPRed

  config: ${instrument.calibration.home}/SNAPInstPrm.json
  native:
    pixelResolution: 1179648
    # "instrument.native.definition" is overridden in "test.yml":
    definition:
      file: ${module.root}/resources/SNAP_Definition.xml
  lite:
    pixelResolution: 18432
    # "instrument.lite.definition" is overridden in "test.yml":
    definition:
      file: ${module.root}/resources/SNAPLite_Definition.xml
    map:
      file: ${instrument.calibration.home}/Powder/LiteGroupMap.hdf
  startingRunNumber: 10000
  minimumRunNumber: 46342
  maxNumberOfRuns: 10

nexus:
  lite:
    prefix: shared/lite/SNAP_
    extension: .lite.nxs.h5
  native:
    prefix: nexus/SNAP_
    extension: .nxs.h5
  home: nexus/
  file:
    extension: .nxs.h5
    prefix: SNAP_

grouping:
  workspacename:
    lite: SNAPLite_grouping_
    native: SNAP_grouping_

calibration:
  file:
    extension: .json
    prefix: SNAPcalibLog
  normalization:
    output:
      ws:
        extension: .nxs
  diffraction:
    output:
      extension: .nxs.h5
    diagnostic:
      extension: .nxs.h5
    convergenceThreshold: 0.5
    nBinsAcrossPeakWidth: 10
    maximumIterations: 5
    maximumOffset: 10
    maxDSpaceShiftFactor: 2.5
    peakFunction: GAUSSIAN
    minimumPeaksPerGroup: 2
    preferredPeaksPerGroup: 4
    smoothingParameter: 0.0001
  parameters:
    default:
      # degrees
      groupSliceValue: 5
      alpha: 1.1
      beta:
        - 1
        - 2
      FWHMMultiplier: {left: 2.0, right: 2.0}
      peakTailCoefficient: 2.0
      smoothing: 0.5
  fitting:
    minSignal2Noise: 10

mantid:
    workspace:
      nameTemplate:
        delimiter: "_"
        template:
          run: "_{unit},{group},{lite},{auxiliary},{runNumber}"
          diffCal:
            input: "_{unit},{runNumber},raw"
            table: "_diffract_consts,{runNumber},{version}"
            output: "_{unit},{group},{runNumber},{version}"
            diagnostic: "_diagnostic,{group},{runNumber},{version}"
            mask: "_diffract_consts,mask,{runNumber},{version}"
            metric: "_calib_metrics,{metricName},{runNumber},{version}"
            timedMetric: "_calib_metrics,{metricName},{runNumber},{timestamp}"
          normCal:
            rawVanadium: "_{unit},{group},raw_van_corr,{runNumber},{version}"
            focusedRawVanadium: "_{unit},{group},raw_van_corr,{runNumber},{version}"
            smoothedFocusedRawVanadium: "_{unit},{group},fitted_van_corr,{runNumber},{version}"
          reduction:
            output: "_reduced,{unit},{group},{runNumber},{timestamp}"
            outputGroup: "_reduced,{stateId},{timestamp}"
            pixelMask: "_pixelmask,{runNumber},{timestamp}"
            # the user pixel mask name token is case sensitive
            userPixelMask: "MaskWorkspace,{numberTag}"
        formatter:
          version:
            # Zero fill to 4 digits.  Allow excess length.
            workspace: "v{version:04d}"
            path: "v_{version:04d}"
          timestamp:
            # Substitute timestamp-in-milliseconds if the keyword is present (e.g. "ts{timestamp}"),
            #   otherwise use `datetime.strftime` format-string syntax.
            workspace: "%Y-%m-%dT%H%M%S%z"
            path: "%Y-%m-%dT%H%M%S%z"
            path_regx: "([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2})([0-9]{2})([0-9]{2})"
          numberTag:
            # No zero fill.  Will not be output if == 1.  Allow excess length.
            workspace: "{number}"
            path: "{number}"
          runNumber:
            # Zero fill to 6 digits.  Allow excess length.
            workspace: "{runNumber:>06}"
            path: "{runNumber:>06}"
          stateId:
            # Only use the first 8 characters from the SHA.
            workspace: "{stateId:8.8}"
            path: "{stateId}"
        units:
          dSpacing: dsp
          timeOfFlight: tof
          momentumTransfer: qsp
          wavelength: lam
          diagnostic: diagnostic
        groups:
          unfocussed: unfoc
          all: all
          column: column
          bank: bank

localdataservice:
  config:
    verifypaths: true

logging:
  # logging.NOTSET: 0, logging.DEBUG: 10, logging.INFO: 20, logging:WARNING: 30, logging.ERROR: 40, logging.CRITICAL: 50
  SNAP:
    stream:
      level: 40
      format: '%(asctime)s - %(levelname)-8s - %(name)s - %(message)s'
  mantid:
    stream:
      level: 40
      format: 'MANTID %(levelname)s - %(message)s'
    file:
      level: 40
      format: 'MANTID FILE %(levelname)s - %(message)s'
      output: '/dev/null'

samples:
  home: ${instrument.calibration.sample.home}


test:
  config:
    name: test
    home: /some/path
  persistence:
    read: ${test.config.home}
    write: ~/${test.config.home}
  data:
    home: ${test.persistence}/data/${test.config.name}

cis_mode: false

version:
  friendlyName:
    error: "uninitialized"
    default: "0xF"  # this tests alphanumeric defaults
  start: 0

constants:
  millisecondsPerSecond: 1000
  PeakIntensityFractionThreshold: 0.05
  m2cm: 10000.0 # conversion factor for m^2 to cm^2

  CrystallographicInfo:
    crystalDMin: 0.4
    crystalDMax: 100.0

  CalibrationReduction:
    tofMin: 2000
    tofMax: 14500
    rebinParams: [2000, -0.001, 14500]

  DetectorPeakPredictor:
    fwhm: 2.35482004503 # used to convert gaussian to fwhm 2 * sqrt(2 * log_e(2))

  GroupDiffractionCalibration:
    MaxChiSq: 100

  ResampleX:
    NumberBins: 1500

  CropFactors:
    lowWavelengthCrop: 0.05
    lowdSpacingCrop: 0.1
    highdSpacingCrop: 0.15

metadata:
  tagPrefix: testSNAPfuntime_
