name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main, qa, next]
    tags: ['v*']

jobs:
  tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge,defaults
        mamba-version: "*"
        activate-environment: SNAPRed
    - name: Restore cached conda environment
      id: cache-load
      uses: actions/cache/restore@v3
      with:
        path: /usr/share/miniconda/envs/SNAPRed
        key: ${{ runner.os }}-conda-${{ hashFiles('**/environment.yml') }}
    - name: Load Environment
      if: steps.cache-load.outputs.cache-hit != 'true'
      run: |
        mamba env update --file environment.yml  --prune
    - name: Test with pytest
      run: |
        mamba install pytest
        python -m pytest --cov=src --cov-report=xml --cov-report=term
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3


  conda-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8"]
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge,mantid,defaults
        mamba-version: "*"
        activate-environment: SNAPRed
    - name: Restore cached conda environment
      id: cache-load
      uses: actions/cache/restore@v3
      with:
        path: /usr/share/miniconda/envs/SNAPRed
        key: ${{ runner.os }}-conda-${{ hashFiles('**/environment.yml') }}
    - name: Load Environment
      if: steps.cache-load.outputs.cache-hit != 'true'
      run: |
        mamba env update --file environment.yml  --prune
    - name: Build python wheel
      shell: bash -l {0}
      run: |
        python -m build --wheel --no-isolation
    - name: Build conda libraray
      shell: bash -l {0}
      run: |
        # set up environment
        cd conda.recipe
        echo "versioningit $(versioningit ../)"
        # build the package
        VERSION=$(versioningit ../) conda mambabuild --output-folder . .
        conda verify noarch/snapred*.tar.bz2
    - name: Deploy to Anaconda
      shell: bash -l {0}
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        IS_RC: ${{ contains(github.ref, 'rc') }}
      run: |
        # label is main or rc depending on the tag-name
        CONDA_LABEL="main"
        if [ "${IS_RC}" = "true" ]; then CONDA_LABEL="rc"; fi
        echo pushing ${{ github.ref }} with label $CONDA_LABEL
        anaconda upload --label $CONDA_LABEL conda.recipe/noarch/snapred*.tar.bz2


  trigger-deploy:
    runs-on: ubuntu-latest
    needs: [lint, tests, conda-build]
    # only trigger deploys from protected branches and tags
    if: ${{github.ref_protected || github.ref_type == 'tag' }}
    steps:
      - name: Determine Environment
        uses: neutrons/branch-mapper@v2
        id: conda_env_name
        with:
          prefix: snapred

      - name: Trigger deploy
        id: trigger
        uses: eic/trigger-gitlab-ci@v2
        with:
          url: https://code.ornl.gov
          token: ${{ secrets.GITLAB_TRIGGER_TOKEN }}
          ref_name: main
          project_id: 7835
          variables: |
            PLAY="update"
            CONDA_ENV="${{ steps.conda_env_name.outputs.name }}"
